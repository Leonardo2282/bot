# app/bot.py
import asyncio
import json
from typing import List, Mapping, Any

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQuery, InlineQueryResultPhoto, InputMediaPhoto
)

from .config import settings
from . import db
from .payments import cryptopay

bot = Bot(settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

AMOUNTS_USDT = [1, 2, 4, 8, 16, 32, 64, 128, 256]

# ===================== keyboards =====================
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="üéü –¢–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏", callback_data="mybets")],
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞–≤–∫–æ–π", callback_data="share")],
    ])

def kb_fights_list(items: List[Mapping[str, Any]]) -> InlineKeyboardMarkup:
    rows = []
    for f in items[:]:
        t = f"{f['participant1_name']} vs {f['participant2_name']}"
        rows.append([InlineKeyboardButton(text=t, callback_data=f"fight:{f['id']}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_reply_link(deal_id: int, bot_username: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="ü§ù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—Ç–∞–≤–∫—É",
            url=f"https://t.me/{bot_username}?start=reply_{deal_id}"
        )]
    ])

def kb_fight(f: Mapping[str, Any]) -> InlineKeyboardMarkup:
    p1 = f["participant1_name"]; p2 = f["participant2_name"]
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {p1}", callback_data=f"bet_side:{f['id']}:1")],
        [InlineKeyboardButton(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {p2}", callback_data=f"bet_side:{f['id']}:2")],
        [InlineKeyboardButton(text="üìú –û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–∞–≤–∫–∏", callback_data=f"open:{f['id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="events")],
    ])

def kb_amounts(fid: int, side: int) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    for i, amt in enumerate(AMOUNTS_USDT, start=1):
        row.append(InlineKeyboardButton(text=f"{amt} USDT", callback_data=f"bet_amt:{fid}:{side}:{amt}"))
        if i % 3 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"fight:{fid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_open_deals(fight_id: int, deals: List[Mapping[str, Any]]) -> InlineKeyboardMarkup:
    rows = []
    for d in deals[:20]:
        side = d["participant1"]; amt = d["amount1_cents"] / 100
        rows.append([InlineKeyboardButton(
            text=f"–û—Ç–≤–µ—Ç–∏—Ç—å: {amt:.2f} USDT (–Ω–∞ {'P2' if side==1 else 'P1'})",
            callback_data=f"reply:{d['id']}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"fight:{fight_id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_pay(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Mini App", url=url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")],
    ])

def kb_reply_one(deal_id: int, label: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=f"reply:{deal_id}")],
    ])

def kb_share_pick_chat(deal_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", switch_inline_query=f"reply_{deal_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")],
    ])

# ===================== helpers =====================
async def ensure_user(tg_user) -> Mapping[str, Any]:
    return await db.ensure_user_by_tg(tg_user.id, tg_user.username or tg_user.full_name)

def fight_caption(f: Mapping[str, Any]) -> str:
    lines = [f"<b>{f['title']}</b>", f"{f['participant1_name']} vs {f['participant2_name']}"]
    if f.get("starts_at"): lines.append(f"–°—Ç–∞—Ä—Ç: {f['starts_at']}")
    if f.get("description"): lines += ["", f"{f['description']}"]
    return "\n".join(lines)

async def replace(cq: CallbackQuery, text: str, reply_markup: InlineKeyboardMarkup):
    try:
        await cq.message.delete()
    except Exception:
        pass
    await cq.message.answer(text, reply_markup=reply_markup)
# === helpers (–¥–æ–±–∞–≤—å —Ä—è–¥–æ–º —Å show_main/replace) ===
async def send_with_photo(target_msg_or_chat, photo_url: str, caption: str, reply_markup: InlineKeyboardMarkup):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ+–ø–æ–¥–ø–∏—Å—å.
    target_msg_or_chat: Message (–¥–ª—è .answer_*) –∏–ª–∏ —Å–∞–º Bot/ChatId ‚Äî –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Message.
    """
    try:
        await target_msg_or_chat.answer_photo(photo=photo_url, caption=caption, reply_markup=reply_markup)
    except Exception:
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ñ–æ—Ç–æ –±–∏—Ç–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
        await target_msg_or_chat.answer(caption, reply_markup=reply_markup)

from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup

async def replace_with_photo(
    cq: CallbackQuery,
    photo_url: str,
    caption: str,
    reply_markup: InlineKeyboardMarkup | None = None
):
    # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    try:
        await cq.message.delete()
    except Exception:
        pass
    await cq.message.answer_photo(photo=photo_url, caption=caption, reply_markup=reply_markup)

async def show_main(target_msg: Message):
    photo = getattr(settings, "MAIN_MENU_PHOTO_URL", None)
    if photo:
        await send_with_photo(target_msg, photo, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", kb_main())
    else:
        await target_msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())

async def auto_check_and_finalize(cq: CallbackQuery, invoice_id: int):
    """
    30 —Å–µ–∫, —à–∞–≥ 2 —Å–µ–∫, –æ–ø—Ä–∞—à–∏–≤–∞–µ–º CryptoPay. –ù–∞ paid ‚Äî –ø—Ä–æ–≤–æ–¥–∏–º NEW/MATCH –∏ –ø—Ä–∞–≤–∏–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    for _ in range(15):  # ~30 —Å–µ–∫
        try:
            invs = await cryptopay.get_invoices([invoice_id])
            inv = next((x for x in invs if int(x.get("invoice_id", 0)) == invoice_id), None)
        except Exception:
            inv = None

        if inv and inv.get("status") == "paid":
            iw = await db.get_invoice_wait(invoice_id)
            text = "–û–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚úÖ."
            if iw:
                payload = json.loads(iw["payload"])
                payer_tg = int(payload.get("tg_user_id"))
                user = await db.ensure_user_by_tg(payer_tg, None)

                if iw["kind"] == "NEW":
                    await db.create_deal_after_paid(payload, invoice_id, user["id"])
                    text = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –∂–¥—ë—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞."
                elif iw["kind"] == "MATCH":
                    await db.match_deal_after_paid(payload, invoice_id, user["id"])
                    text = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ —Å–º–∞—Ç—á–µ–Ω–∞!"

                await db.del_invoice_wait(invoice_id)

            try:
                if cq.message:
                    await cq.message.edit_text(text, reply_markup=kb_main())
                else:
                    await bot.edit_message_caption(
                        inline_message_id=cq.inline_message_id,
                        caption=text,
                        reply_markup=kb_main(),
                        parse_mode=ParseMode.HTML
                    )
            except Exception:
                pass
            return

        await asyncio.sleep(2)

    # —Ç–∞–π–º–∞—É—Ç ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª
    rm = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkpay:{invoice_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")],
    ])
    try:
        if cq.message:
            await cq.message.edit_reply_markup(reply_markup=rm)
        else:
            await bot.edit_message_reply_markup(inline_message_id=cq.inline_message_id, reply_markup=rm)
    except Exception:
        pass

# ===================== handlers =====================
# –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
import re
REPLY_RE = re.compile(r"(?:^|[\s?=&])reply_(\d+)\b", re.IGNORECASE)

@dp.message(CommandStart())
async def start(m: Message):
    await ensure_user(m.from_user)

    raw = m.text or ""
    compact = " ".join(raw.split())                  # —É–±–∏—Ä–∞–µ–º \n –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    mobj = REPLY_RE.search(compact)                  # –ª–æ–≤–∏–º reply_<id> –≤ –õ–Æ–ë–û–ô —Ñ–æ—Ä–º–µ

    if not mobj:
        await show_main(m)                           # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return

    try:
        deal_id = int(mobj.group(1))
    except Exception:
        await show_main(m)
        return

    u = await ensure_user(m.from_user)
    d = await db.fetchrow("""
        SELECT d.*, f.title, f.participant1_name p1, f.participant2_name p2, f.photo_url
        FROM deal d JOIN fight f ON f.id=d.fight_id
        WHERE d.id=$1
    """, deal_id)

    if (not d) or (not d["paid1"]) or d["status"] != "awaiting_match":
        await m.answer("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=kb_main()); return
    if d["user1_id"] == u["id"]:
        await m.answer("–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É. –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–≥—É —á–µ—Ä–µ–∑ ¬´üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞–≤–∫–æ–π¬ª.",
                       reply_markup=kb_main()); return

    need_side = 2 if d["participant1"] == 1 else 1
    amt = (d["amount1_cents"] or 0) / 100
    text = (f"<b>{d['title']}</b>\n{d['p1']} vs {d['p2']}\n\n"
            f"–°—Ç–∞–≤–∫–∞ –¥—Ä—É–≥–∞: <b>{amt:.2f} USDT</b>\n"
            f"–ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞: <b>{'P1' if need_side == 1 else 'P2'}</b>")

    if d.get("photo_url"):
        await m.answer_photo(d["photo_url"], caption=text,
                             reply_markup=kb_reply_one(deal_id, "ü§ù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—Ç–∞–≤–∫—É"))
    else:
        await m.answer(text, reply_markup=kb_reply_one(deal_id, "ü§ù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—Ç–∞–≤–∫—É"))

@dp.callback_query(F.data == "back_main")
async def back_main(cq: CallbackQuery):
    try:
        await cq.message.delete()
    except Exception:
        pass
    await show_main(cq.message)   # –ø–æ–∫–∞–∂–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±–ª–æ–∂–∫–æ–π

@dp.callback_query(F.data == "events")
async def cb_events(cq: CallbackQuery):
    items = await db.list_upcoming()
    events_photo = getattr(settings, "EVENTS_MENU_PHOTO_URL", None)

    if not items:
        caption = "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
        if events_photo:
            await replace_with_photo(cq, events_photo, caption, kb_main())
        else:
            await replace(cq, caption, kb_main())
        return

    caption = "–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ:"
    markup = kb_fights_list(items)
    if events_photo:
        await replace_with_photo(cq, events_photo, caption, markup)
    else:
        await replace(cq, caption, markup)



@dp.callback_query(F.data.startswith("open:"))
async def cb_open(cq: CallbackQuery):
    fight_id = int(cq.data.split(":")[1])
    u = await ensure_user(cq.from_user)
    deals = await db.list_open_deals(fight_id, exclude_user_id=u["id"])
    if not deals:
        f = await db.get_fight(fight_id)
        return await replace(cq, "–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ—Ç.\n–°–æ–∑–¥–∞–π —Å–≤–æ—é:", InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {f['participant1_name']}", callback_data=f"bet_side:{fight_id}:1")],
            [InlineKeyboardButton(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {f['participant2_name']}", callback_data=f"bet_side:{fight_id}:2")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"fight:{fight_id}")],
        ]))
    await replace(cq, "–û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–∞–≤–∫–∏:", kb_open_deals(fight_id, deals))

@dp.callback_query(F.data.startswith("bet_side:"))
async def cb_side(cq: CallbackQuery):
    _, fid, side = cq.data.split(":")
    await replace(cq, "–í—ã–±–µ—Ä–∏ —Å—É–º–º—É:", kb_amounts(int(fid), int(side)))

@dp.callback_query(F.data.startswith("bet_amt:"))
async def cb_amount(cq: CallbackQuery):
    _, fid, side, amt = cq.data.split(":")
    fight_id, participant, amount = int(fid), int(side), int(amt)
    await ensure_user(cq.from_user)

    payload = {
        "kind": "NEW",
        "fight_id": fight_id,
        "participant": participant,
        "amount_cents": amount * 100,
        "tg_user_id": cq.from_user.id,
    }

    inv = await cryptopay.create_invoice(
        amount_cents=amount * 100,
        asset=settings.CRYPTO_DEFAULT_ASSET,
        payload=json.dumps(payload),
    )
    invoice_id = int(inv["invoice_id"])
    await db.add_invoice_wait(invoice_id, "NEW", payload)

    pay_url = inv.get("bot_invoice_url") or inv.get("pay_url") or inv.get("url")
    await cq.message.edit_text(
        f"–°–æ–∑–¥–∞–Ω —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>{amount} USDT</b>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ—è.",
        reply_markup=kb_pay(pay_url)
    )

    # –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–π –∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    asyncio.create_task(auto_check_and_finalize(cq, invoice_id))

@dp.callback_query(F.data.startswith("fight:"))
async def cb_fight(cq: CallbackQuery):
    fid = int(cq.data.split(":")[1])
    f = await db.get_fight(fid)
    if not f:
        await cq.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ
    if f.get("photo_url"):
        try:
            await cq.message.edit_media(
                InputMediaPhoto(media=f["photo_url"], caption=fight_caption(f)),
                reply_markup=kb_fight(f)
            )
            return
        except Exception:
            # –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ñ–æ—Ç–æ) ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏–º
            pass

    await replace(cq, fight_caption(f), kb_fight(f))

@dp.callback_query(F.data.startswith("reply:"))
async def cb_reply(cq: CallbackQuery):
    deal_id = int(cq.data.split(":")[1])
    u = await ensure_user(cq.from_user)
    d = await db.fetchrow("""SELECT d.*, f.participant1_name p1, f.participant2_name p2
                               FROM deal d JOIN fight f ON f.id=d.fight_id
                              WHERE d.id=$1""", deal_id)
    if not d or not d["paid1"] or d["status"] != "awaiting_match":
        return await cq.answer("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
    if d["user1_id"] == u["id"]:
        return await cq.answer("–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.", show_alert=True)

    resp_side = 2 if d["participant1"] == 1 else 1
    amt_cents = int(d["amount1_cents"])
    payload = {"kind": "MATCH", "deal_id": deal_id, "participant": resp_side,
               "amount_cents": amt_cents, "tg_user_id": cq.from_user.id}

    inv = await cryptopay.create_invoice(
        amount_cents=amt_cents,
        asset=settings.CRYPTO_DEFAULT_ASSET,
        payload=json.dumps(payload)
    )
    invoice_id = int(inv["invoice_id"])
    await db.add_invoice_wait(invoice_id, "MATCH", payload)
    pay_url = inv.get("bot_invoice_url") or inv.get("pay_url") or inv.get("url")

    # –í–ê–ñ–ù–û: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ delete+answer), —á—Ç–æ–±—ã –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–≥–ª–∞ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
    await cq.message.edit_text(
        f"–°—á—ë—Ç –Ω–∞ <b>{amt_cents / 100:.2f} USDT</b> —Å–æ–∑–¥–∞–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —Å–º–∞—Ç—á–µ–Ω–∞.",
        reply_markup=kb_pay(pay_url),
    )

    asyncio.create_task(auto_check_and_finalize(cq, invoice_id))

@dp.callback_query(F.data == "mybets")
async def cb_mybets(cq: CallbackQuery):
    u = await ensure_user(cq.from_user)

    rows = await db.fetch("""
        SELECT d.*,
               f.title,
               f.participant1_name AS p1,
               f.participant2_name AS p2,
               f.status AS fight_status
        FROM deal d
        JOIN fight f ON f.id = d.fight_id
        WHERE (d.user1_id = $1 OR d.user2_id = $1)
          AND f.status IN ('upcoming','today','live')
          AND d.status IN ('awaiting_match','matched')
        ORDER BY d.id DESC
        LIMIT 100
    """, u["id"])

    if not rows:
        await replace(cq, "–°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.", kb_main())
        return

    lines = []
    for b in rows:
        who = "P1" if b["user1_id"] == u["id"] else ("P2" if b["user2_id"] == u["id"] else "?")
        side = b["participant1"] if who == "P1" else b.get("participant2")
        side_txt = "–Ω–∞ 1-–≥–æ" if side == 1 else "–Ω–∞ 2-–≥–æ"
        amt = (b["amount1_cents"] if who == "P1" else (b["amount2_cents"] or 0)) / 100
        status_human = "–∂–¥—ë—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞" if b["status"] == "awaiting_match" else "—Å–º–∞—Ç—á–µ–Ω–∞"
        lines.append(f"‚Ä¢ <b>{b['title']}</b> ‚Äî {side_txt} ‚Äî {amt:.2f} {settings.CRYPTO_DEFAULT_ASSET} ‚Äî {status_human}")

    await replace(cq, "\n".join(lines), kb_main())

@dp.callback_query(F.data == "share")
async def cb_share(cq: CallbackQuery):
    u = await ensure_user(cq.from_user)

    sql = """
    SELECT
        d.id,
        d.amount1_cents,
        d.participant1,
        f.title,
        f.participant1_name AS p1,
        f.participant2_name AS p2
    FROM deal AS d
    JOIN fight AS f ON f.id = d.fight_id
    WHERE d.user1_id = $1
      AND d.status = 'awaiting_match'
      AND d.paid1 = TRUE
      AND d.user2_id IS NULL
    ORDER BY d.id DESC
    LIMIT 20
    """

    try:
        rows = await db.fetch(sql, u["id"])
    except Exception as e:
        # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–ø—è—Ç—å —á—Ç–æ-—Ç–æ —Å SQL
        await cq.answer(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏: {type(e).__name__}", show_alert=True)
        return

    if not rows:
        await replace(cq, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É.", kb_main())
        return

    kb_rows = []
    for r in rows:
        amt = (r["amount1_cents"] or 0) / 100
        fighter = r["p1"] if int(r["participant1"]) == 1 else r["p2"]
        kb_rows.append([
            InlineKeyboardButton(
                text=f"üì§ {fighter} ‚Ä¢ {amt:.2f} USDT",
                callback_data=f"sharedeal:{r['id']}"
            )
        ])

    kb_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")])
    await replace(cq, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É:", InlineKeyboardMarkup(inline_keyboard=kb_rows))

@dp.callback_query(F.data.startswith("sharedeal:"))
async def cb_sharedeal(cq: CallbackQuery):
    deal_id = int(cq.data.split(":")[1])

    # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π SQL –±–µ–∑ "..."
    sql = """
    SELECT
        d.*,
        f.title,
        f.photo_url,
        f.participant1_name AS p1,
        f.participant2_name AS p2
    FROM deal AS d
    JOIN fight AS f ON f.id = d.fight_id
    WHERE d.id = $1
    """
    d = await db.fetchrow(sql, deal_id)

    if (not d) or (not d["paid1"]) or d["status"] != "awaiting_match":
        await cq.answer("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∫ –ø–µ—Ä–µ—Å—ã–ª–∫–µ.", show_alert=True)
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É¬ª
    photo = getattr(settings, "MAIN_MENU_PHOTO_URL", None)
    caption = "–ù–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É¬ª, –≤—ã–±–µ—Ä–∏ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–æ—á–∫—É:"
    markup = kb_share_pick_chat(deal_id)

    if photo:
        await replace_with_photo(cq, photo, caption, markup)
    else:
        await replace(cq, caption, markup)

@dp.inline_query()
async def inline_share(iq: InlineQuery):
    q = (iq.query or "").strip()
    if not q.startswith("reply_"):
        return await bot.answer_inline_query(iq.id, [], cache_time=1, is_personal=True)

    try:
        deal_id = int(q.split("_", 1)[1])
    except Exception:
        return await bot.answer_inline_query(iq.id, [], cache_time=1, is_personal=True)

    d = await db.fetchrow("""
        SELECT d.*,
               f.title,
               f.participant1_name AS p1,
               f.participant2_name AS p2,
               f.photo_url
        FROM deal d
        JOIN fight f ON f.id = d.fight_id
        WHERE d.id = $1
    """, deal_id)
    if not d or not d["paid1"] or d["status"] != "awaiting_match":
        return await bot.answer_inline_query(iq.id, [], cache_time=1, is_personal=True)

    need_side   = 2 if d["participant1"] == 1 else 1
    amt         = (d["amount1_cents"] or 0) / 100
    picked_name = d["p1"] if d["participant1"] == 1 else d["p2"]

    caption = (
        f"<b>–°—Ç–∞–≤–∫–∞ –Ω–∞ {picked_name}</b>\n"
        f"{d['p1']} vs {d['p2']}\n\n"
        f"–°—É–º–º–∞: <b>{amt:.2f} USDT</b>\n"
        f"–ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞: <b>{'P1' if need_side == 1 else 'P2'}</b>"
    )
    photo_url = d.get("photo_url") or "https://via.placeholder.com/800x500.png?text=Fight"

    # –í–∞–∂–Ω–æ: —É InlineQueryResultPhoto –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è 'description' (–µ–≥–æ –Ω–µ—Ç).
    result = InlineQueryResultPhoto(
        id=str(deal_id),
        photo_url=photo_url,
        thumbnail_url=photo_url,
        caption=caption,
        parse_mode=ParseMode.HTML,
        reply_markup=kb_reply_link(deal_id, (await bot.me()).username),
    )
    await bot.answer_inline_query(iq.id, [result], cache_time=0, is_personal=True)

# ===================== payments poller =====================
async def payments_loop():
    while True:
        try:
            ids = await db.pending_invoice_ids()
            if ids:
                invs = await cryptopay.get_invoices(ids)
                inv_map = {}
                for x in invs:
                    if isinstance(x, dict):
                        try:
                            inv_map[int(x.get("invoice_id", 0))] = x
                        except Exception:
                            continue
                for inv_id in ids:
                    inv = inv_map.get(int(inv_id))
                    if inv and inv.get("status") == "paid":
                        iw = await db.get_invoice_wait(int(inv_id))
                        if iw:
                            payload = json.loads(iw["payload"])
                            payer_tg = int(payload.get("tg_user_id"))
                            user = await db.ensure_user_by_tg(payer_tg, None)
                            if iw["kind"] == "NEW":
                                await db.create_deal_after_paid(payload, int(inv_id), user["id"])
                            elif iw["kind"] == "MATCH":
                                await db.match_deal_after_paid(payload, int(inv_id), user["id"])
                            await db.del_invoice_wait(int(inv_id))
            await asyncio.sleep(6)
        except Exception as e:
            print(f"[payments_loop] tick error: {e!r}")
            await asyncio.sleep(6)

from aiogram.types import BotCommand

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ]
    await bot.set_my_commands(commands)

async def main():
    asyncio.create_task(payments_loop())
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())