import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from app.config import settings

# ======================
# BOT
# ======================
bot = Bot(settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ======================
# MOCK DATA (–∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ = –æ–¥–∏–Ω –±–æ–π)
# ======================
EVENTS = [
    {
        "id": 101,
        "title": "Alpha vs Bravo",
        "p1": "Alpha",
        "p2": "Bravo",
        "photo": "https://picsum.photos/seed/fight101/1200/700",
        "starts_at": datetime.now() + timedelta(hours=6),
        "status": "upcoming",
        "description": "Alpha –ø—Ä–æ—Ç–∏–≤ Bravo ‚Äî —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–≤.",
    },
    {
        "id": 102,
        "title": "Charlie vs Delta",
        "p1": "Charlie",
        "p2": "Delta",
        "photo": "https://picsum.photos/seed/fight102/1200/700",
        "starts_at": datetime.now() + timedelta(hours=8),
        "status": "upcoming",
        "description": "–î–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–π —Ä–µ–≤–∞–Ω—à: –∫—Ç–æ –∑–∞–±–µ—Ä—ë—Ç –≤–µ—á–µ—Ä?",
    },
    {
        "id": 201,
        "title": "Echo vs Foxtrot",
        "p1": "Echo",
        "p2": "Foxtrot",
        "photo": "https://picsum.photos/seed/fight201/1200/700",
        "starts_at": datetime.now() + timedelta(days=1, hours=2),
        "status": "upcoming",
        "description": "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∞—Ä—å –ø—Ä–æ—Ç–∏–≤ –ø–∞–Ω—á–µ—Ä–∞ ‚Äî —Å—Ç–∞–≤–∫–∏ –±—É–¥—É—Ç –∂–∞—Ä–∫–∏–º–∏.",
    },
]

MY_NOTIFICATIONS = {}

# ======================
# HELPERS
# ======================
def main_menu_kb(notify_on: bool = True):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="menu:events")
    kb.button(text="üíº –ú–æ–∏ —Å—Ç–∞–≤–∫–∏", callback_data="menu:mybets")
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="menu:balance")
    kb.button(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="menu:deposit")
    kb.button(text="‚¨ÖÔ∏è –í—ã–≤–µ—Å—Ç–∏", callback_data="menu:withdraw")
    kb.button(text=("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ON" if notify_on else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: OFF"),
              callback_data="menu:notify_toggle")
    kb.adjust(2, 2, 2)
    return kb.as_markup()


def back_to_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="menu:root")
    return kb.as_markup()


def events_kb():
    kb = InlineKeyboardBuilder()
    for f in sorted(EVENTS, key=lambda x: x["starts_at"]):
        label = f"{f['title']} ‚Äî {f['starts_at']:%d.%m %H:%M}"
        kb.button(text=label, callback_data=f"fight:{f['id']}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:root")
    kb.adjust(1)
    return kb.as_markup()


def fight_card_kb(fight_id: int, p1: str, p2: str):
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {p1}", callback_data=f"bet:{fight_id}:1")
    kb.button(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {p2}", callback_data=f"bet:{fight_id}:2")
    kb.button(text="‚óÄÔ∏è –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="menu:events")
    kb.adjust(1, 1, 1)
    return kb.as_markup()


async def safe_edit(message, text: str, **kwargs):
    try:
        await message.edit_text(text, **kwargs)
    except TelegramBadRequest:
        await message.answer(text, **kwargs)

# ======================
# HANDLERS
# ======================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    MY_NOTIFICATIONS[m.from_user.id] = True
    await m.answer("–ë–æ—Ç-–¥–µ–º–æ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏. –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–ª–æ—É.",
                   reply_markup=main_menu_kb(True))


@dp.callback_query(F.data == "menu:root")
async def cb_root(cq: CallbackQuery):
    notify = MY_NOTIFICATIONS.get(cq.from_user.id, True)
    await safe_edit(cq.message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(notify))


@dp.callback_query(F.data == "menu:events")
async def cb_events(cq: CallbackQuery):
    await safe_edit(cq.message, "–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ (–±–æ–π):", reply_markup=events_kb())


@dp.callback_query(F.data.startswith("fight:"))
async def cb_fight(cq: CallbackQuery):
    fight_id = int(cq.data.split(":")[1])
    fight = next((f for f in EVENTS if f["id"] == fight_id), None)
    if not fight:
        await cq.answer("–ü–æ–µ–¥–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    caption = (f"<b>{fight['title']}</b>\n{fight['p1']} vs {fight['p2']}\n"
               f"–°—Ç–∞—Ä—Ç: {fight['starts_at']:%d.%m %H:%M}\n"
               f"–°—Ç–∞—Ç—É—Å: {fight['status']}\n\n{fight.get('description','')}")
    await cq.message.answer_photo(
        photo=fight["photo"],
        caption=caption,
        reply_markup=fight_card_kb(fight_id, fight["p1"], fight["p2"])
    )


@dp.callback_query(F.data.startswith("bet:"))
async def cb_bet(cq: CallbackQuery):
    _, fight_id, side = cq.data.split(":")
    await cq.answer()
    await cq.message.answer(
        f"–ó–∞–≥–ª—É—à–∫–∞ —Å—Ç–∞–≤–∫–∏: fight_id={fight_id}, —Å—Ç–æ—Ä–æ–Ω–∞={side}. "
        f"–í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç—É—Ç –æ—Ç–∫—Ä–æ–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
    )


@dp.callback_query(F.data == "menu:mybets")
async def cb_mybets(cq: CallbackQuery):
    await safe_edit(
        cq.message,
        "–ú–æ–∏ —Å—Ç–∞–≤–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞). –¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
        reply_markup=back_to_menu_kb(),
    )


@dp.callback_query(F.data == "menu:balance")
async def cb_balance(cq: CallbackQuery):
    await safe_edit(
        cq.message,
        "–ë–∞–ª–∞–Ω—Å: <b>100.00</b> USDT, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <b>0.00</b> (–∑–∞–≥–ª—É—à–∫–∞)",
        reply_markup=back_to_menu_kb(),
    )


@dp.callback_query(F.data == "menu:deposit")
async def cb_deposit(cq: CallbackQuery):
    await safe_edit(
        cq.message,
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞). –¢—É—Ç –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç' –∏ —Å—É–º–º—É.",
        reply_markup=back_to_menu_kb(),
    )


@dp.callback_query(F.data == "menu:withdraw")
async def cb_withdraw(cq: CallbackQuery):
    await safe_edit(
        cq.message,
        "–í—ã–≤–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞). –¢—É—Ç –∑–∞–ø—Ä–æ—Å–∏–º —Å—É–º–º—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —á–µ—Ä–µ–∑ Crypto Pay.",
        reply_markup=back_to_menu_kb(),
    )


@dp.callback_query(F.data == "menu:notify_toggle")
async def cb_toggle(cq: CallbackQuery):
    cur = MY_NOTIFICATIONS.get(cq.from_user.id, True)
    MY_NOTIFICATIONS[cq.from_user.id] = not cur
    await cb_root(cq)

# ======================
# ENTRYPOINT
# ======================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
